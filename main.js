/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => CypherPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  cypherStyle: "diagrammatic"
};
var CypherPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.isTypingHandled = false;
    this.isCypherEnabled = false;
  }
  async onload() {
    await this.loadSettings();
    this.addRibbonIcon("dice", "Cypher Text", () => {
      this.isCypherEnabled = !this.isCypherEnabled;
      if (this.isCypherEnabled) {
        new import_obsidian.Notice("Cypher Plugin Activated!");
        this.applyCypher();
      } else {
        new import_obsidian.Notice("Cypher Plugin Deactivated!");
        this.revertCypher();
      }
    }).addClass("cypher-plugin-ribbon-class");
    this.addCommand({
      id: "cypher-transform",
      name: "Transform Selected Text to Cypher",
      editorCallback: (editor, view) => this.transformText(editor)
    });
    this.addSettingTab(new CypherSettingTab(this.app, this));
    this.registerEvent(
      this.app.workspace.on("editor-change", () => {
        var _a;
        const editor = (_a = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView)) == null ? void 0 : _a.editor;
        if (editor && this.isCypherEnabled) {
          this.debounceTyping(editor, 500);
        }
      })
    );
  }
  onunload() {
    console.log("Cypher Plugin unloaded.");
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  // Debounce function to delay the execution of handleTyping
  debounceTyping(editor, delay = 500) {
    if (this.isTypingHandled)
      return;
    if (this.typingTimeout)
      clearTimeout(this.typingTimeout);
    this.isTypingHandled = true;
    this.typingTimeout = window.setTimeout(() => {
      this.handleTyping(editor);
      this.isTypingHandled = false;
    }, delay);
  }
  // Cypher transformation with distinct symbols for uppercase and lowercase
  toCypherText(input) {
    const iconCypherMap = {
      A: "\u{1F53A}",
      B: "\u{1F171}\uFE0F",
      C: "\u{1F31C}",
      D: "\u{1F537}",
      E: "\u{1F34F}",
      F: "\u{1F340}",
      G: "\u{1F300}",
      H: "\u{1F3E0}",
      I: "\u{1F98B}",
      J: "\u{1F3B7}",
      K: "\u{1F511}",
      L: "\u{1F33F}",
      M: "\u{1F3C6}",
      N: "\u{1F3B5}",
      O: "\u{1F48E}",
      P: "\u{1F3A9}",
      Q: "\u{1F388}",
      R: "\u{1F339}",
      S: "\u{1F31E}",
      T: "\u{1F3BE}",
      U: "\u{1F422}",
      V: "\u{1F3BB}",
      W: "\u{1F349}",
      X: "\u274C",
      Y: "\u{1F331}",
      Z: "\u26A1\uFE0F",
      a: "\u{1F34E}",
      b: "\u{1F34C}",
      c: "\u{1F352}",
      d: "\u{1F369}",
      e: "\u{1F33D}",
      f: "\u{1F438}",
      g: "\u{1F98D}",
      h: "\u{1F36F}",
      i: "\u{1F366}",
      j: "\u{1F336}\uFE0F",
      k: "\u{1F95D}",
      l: "\u{1F981}",
      m: "\u{1F348}",
      n: "\u{1F95C}",
      o: "\u{1F34A}",
      p: "\u{1F355}",
      q: "\u{1F451}",
      r: "\u{1F400}",
      s: "\u{1F40D}",
      t: "\u{1F32E}",
      u: "\u{1F421}",
      v: "\u{1F347}",
      w: "\u{1F4AB}",
      x: "\u{1F36A}",
      y: "\u{1F993}",
      z: "\u{1F36B}"
    };
    let result = "";
    let wasLastCharSpace = false;
    for (let i = 0; i < input.length; i++) {
      const char = input[i];
      if (char === " ") {
        if (!wasLastCharSpace) {
          result += "  ";
          wasLastCharSpace = true;
        }
      } else {
        result += iconCypherMap[char] || char;
        wasLastCharSpace = false;
      }
    }
    return result;
  }
  // Revert cyphered text back to normal
  revertCypherText(input) {
    const reverseCypherMap = {
      "\u{1F53A}": "A",
      "\u{1F171}\uFE0F": "B",
      "\u{1F31C}": "C",
      "\u{1F537}": "D",
      "\u{1F34F}": "E",
      "\u{1F340}": "F",
      "\u{1F300}": "G",
      "\u{1F3E0}": "H",
      "\u{1F98B}": "I",
      "\u{1F3B7}": "J",
      "\u{1F511}": "K",
      "\u{1F33F}": "L",
      "\u{1F3C6}": "M",
      "\u{1F3B5}": "N",
      "\u{1F48E}": "O",
      "\u{1F3A9}": "P",
      "\u{1F388}": "Q",
      "\u{1F339}": "R",
      "\u{1F31E}": "S",
      "\u{1F3BE}": "T",
      "\u{1F422}": "U",
      "\u{1F3BB}": "V",
      "\u{1F349}": "W",
      "\u274C": "X",
      "\u{1F331}": "Y",
      "\u26A1\uFE0F": "Z",
      "\u{1F34E}": "a",
      "\u{1F34C}": "b",
      "\u{1F352}": "c",
      "\u{1F369}": "d",
      "\u{1F33D}": "e",
      "\u{1F438}": "f",
      "\u{1F98D}": "g",
      "\u{1F36F}": "h",
      "\u{1F366}": "i",
      "\u{1F336}\uFE0F": "j",
      "\u{1F95D}": "k",
      "\u{1F981}": "l",
      "\u{1F348}": "m",
      "\u{1F95C}": "n",
      "\u{1F34A}": "o",
      "\u{1F355}": "p",
      "\u{1F451}": "q",
      "\u{1F400}": "r",
      "\u{1F40D}": "s",
      "\u{1F32E}": "t",
      "\u{1F421}": "u",
      "\u{1F347}": "v",
      "\u{1F4AB}": "w",
      "\u{1F36A}": "x",
      "\u{1F993}": "y",
      "\u{1F36B}": "z"
    };
    return Array.from(input).map((char) => reverseCypherMap[char] || char).join("");
  }
  handleTyping(editor) {
    const cursor = editor.getCursor();
    const lineText = editor.getLine(cursor.line);
    const modifiedText = this.isCypherEnabled ? this.toCypherText(lineText) : this.revertCypherText(lineText);
    editor.setLine(cursor.line, modifiedText);
  }
  applyCypher() {
    var _a;
    const editor = (_a = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView)) == null ? void 0 : _a.editor;
    if (editor) {
      const fullText = editor.getValue();
      editor.setValue(this.toCypherText(fullText));
    }
  }
  revertCypher() {
    var _a;
    const editor = (_a = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView)) == null ? void 0 : _a.editor;
    if (editor) {
      const fullText = editor.getValue();
      editor.setValue(this.revertCypherText(fullText));
    }
  }
  transformText(editor) {
    const selections = editor.getSelection();
    const cypheredText = this.isCypherEnabled ? this.toCypherText(selections) : this.revertCypherText(selections);
    editor.replaceSelection(cypheredText);
  }
};
var CypherSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Cypher Plugin Settings" });
    new import_obsidian.Setting(containerEl).setName("Cypher Style").setDesc("Choose the style for cyphering text").addDropdown((dropdown) => dropdown.addOption("diagrammatic", "Diagrammatic").setValue(this.plugin.settings.cypherStyle).onChange(async (value) => {
      this.plugin.settings.cypherStyle = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,
